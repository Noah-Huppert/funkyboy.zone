apiVersion: minio.min.io/v2
kind: Tenant
metadata:
  annotations:
    prometheus.io/path: /minio/v2/metrics/cluster
    prometheus.io/port: '9000'
    prometheus.io/scrape: 'true'
  labels:
    app: minio
  name: minio
  namespace: minio
spec:
  certConfig: {}
  configuration:
    name: storage-configuration
  env: []
  externalCaCertSecret: []
  externalCertSecret: []
  externalClientCertSecrets: []
  features:
    bucketDNS: false
    domains: {}
  image: >-
    quay.io/minio/minio@sha256:d853057f280079eace3d45fb4ccddcd89bd4c3b87bd38e03d97e2ecaba84acb2
  imagePullSecret: {}
  log:
    affinity:
      nodeAffinity: {}
      podAffinity: {}
      podAntiAffinity: {}
    annotations: {}
    audit:
      diskCapacityGB: 1
    db:
      affinity:
        nodeAffinity: {}
        podAffinity: {}
        podAntiAffinity: {}
      annotations: {}
      env: []
      image: ''
      initimage: ''
      labels: {}
      nodeSelector: {}
      resources: {}
      securityContext:
        fsGroup: 999
        runAsGroup: 999
        runAsNonRoot: true
        runAsUser: 999
      serviceAccountName: ''
      tolerations: []
      volumeClaimTemplate:
        metadata: {}
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
          storageClassName: standard
    env: []
    image: ''
    labels: {}
    nodeSelector: {}
    resources: {}
    securityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    serviceAccountName: ''
    tolerations: []
  mountPath: /export
  podManagementPolicy: Parallel
  pools:
    - name: pool-0
      servers: 2
      volumeClaimTemplate:
        metadata:
          name: data
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 2Gi
      volumesPerServer: 2
  priorityClassName: ''
  prometheus:
    affinity:
      nodeAffinity: {}
      podAffinity: {}
      podAntiAffinity: {}
    annotations: {}
    diskCapacityGB: 1
    env: []
    image: ''
    initimage: ''
    labels: {}
    nodeSelector: {}
    resources: {}
    securityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsNonRoot: true
      runAsUser: 1000
    serviceAccountName: ''
    sidecarimage: ''
    storageClassName: standard
  requestAutoCert: true
  serviceAccountName: ''
  serviceMetadata:
    consoleServiceAnnotations: {}
    consoleServiceLabels: {}
    minioServiceAnnotations: {}
    minioServiceLabels: {}
  subPath: ''
  users:
    - name: storage-user
